"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var mkdirp = require("mkdirp");
var colors = require("colors");
var readline = require("readline");
var api_1 = require("./api");
var Download = (function () {
    function Download() {
        var _this = this;
        this.sppull = function (context, options) {
            _this.context = context;
            _this.options = options;
            if (typeof _this.context.creds === 'undefined') {
                _this.context.creds = __assign({}, _this.context);
            }
            _this.options.spHostName = _this.context.siteUrl
                .replace('http://', '')
                .replace('https://', '')
                .split('/')[0];
            _this.options.spRelativeBase = _this.context.siteUrl
                .replace('http://', '')
                .replace('https://', '')
                .replace(_this.options.spHostName, '');
            if (_this.options.spRootFolder) {
                if (_this.options.spRootFolder.indexOf(_this.options.spRelativeBase) !== 0) {
                    _this.options.spRootFolder = (_this.options.spRelativeBase + '/' + _this.options.spRootFolder).replace(/\/\//g, '/');
                }
                else {
                    if (_this.options.spRootFolder.charAt(0) !== '/') {
                        _this.options.spRootFolder = '/' + _this.options.spRootFolder;
                    }
                }
            }
            if (_this.options.spBaseFolder) {
                if (_this.options.spBaseFolder.indexOf(_this.options.spRelativeBase) !== 0) {
                    _this.options.spBaseFolder = (_this.options.spRelativeBase + '/' + _this.options.spBaseFolder).replace(/\/\//g, '/');
                }
            }
            else {
                _this.options.spBaseFolder = _this.options.spRootFolder;
            }
            _this.options.dlRootFolder = _this.options.dlRootFolder || './Downloads';
            if (typeof _this.options.recursive === 'undefined') {
                _this.options.recursive = true;
            }
            if (typeof _this.options.foderStructureOnly === 'undefined') {
                _this.options.foderStructureOnly = false;
            }
            if (typeof _this.options.createEmptyFolders === 'undefined') {
                _this.options.createEmptyFolders = true;
            }
            if (typeof _this.options.metaFields === 'undefined') {
                _this.options.metaFields = [];
            }
            if (typeof _this.options.restCondition === 'undefined') {
                _this.options.restCondition = '';
            }
            if (_this.options.spDocLibUrl) {
                if (_this.options.spDocLibUrl.indexOf(_this.options.spRelativeBase) !== 0) {
                    _this.options.spDocLibUrl = (_this.options.spRelativeBase + '/' + _this.options.spDocLibUrl).replace(/\/\//g, '/');
                }
                else {
                    if (_this.options.spDocLibUrl.charAt(0) !== '/') {
                        _this.options.spDocLibUrl = '/' + _this.options.spDocLibUrl;
                    }
                }
                _this.options.spDocLibUrl = encodeURIComponent(_this.options.spDocLibUrl);
            }
            if (typeof _this.options.muteConsole === 'undefined') {
                _this.options.muteConsole = false;
            }
            _this.restApi = new api_1.default(_this.context, _this.options);
            if (typeof _this.options.camlCondition !== 'undefined' && _this.options.camlCondition !== '' &&
                typeof _this.options.spDocLibUrl !== 'undefined' && _this.options.spDocLibUrl !== '') {
                return _this.runDownloadCamlObjects();
            }
            else {
                if (typeof _this.options.strictObjects !== 'undefined' && Array.isArray([_this.options.strictObjects])) {
                    _this.options.strictObjects.forEach(function (strictObject, i) {
                        if (typeof strictObject === 'string') {
                            if (strictObject.indexOf(_this.options.spRootFolder) !== 0) {
                                strictObject = (_this.options.spRootFolder + '/' + strictObject).replace(/\/\//g, '/');
                            }
                            _this.options.strictObjects[i] = strictObject;
                        }
                    });
                    return _this.runDownloadStrictObjects();
                }
                else {
                    if (!_this.options.foderStructureOnly) {
                        if (_this.options.recursive) {
                            return _this.runDownloadFilesRecursively();
                        }
                        else {
                            return _this.runDownloadFilesFlat();
                        }
                    }
                    else {
                        return _this.runCreateFoldersRecursively();
                    }
                }
            }
        };
        this.createFolder = function (spFolderPath, spBaseFolder, downloadRoot) {
            return new Promise(function (resolve, reject) {
                var spBaseFolderRegEx = new RegExp(decodeURIComponent(_this.options.spBaseFolder), 'gi');
                var spFolderPathRelative = decodeURIComponent(spFolderPath);
                if (['', '/'].indexOf(_this.options.spBaseFolder) === -1) {
                    spFolderPathRelative = decodeURIComponent(spFolderPath).replace(spBaseFolderRegEx, '');
                }
                var saveFolderPath = path.join(downloadRoot, spFolderPathRelative);
                mkdirp(saveFolderPath, function (err) {
                    if (err) {
                        console.log(colors.red.bold('Error creating folder ' + '`' + saveFolderPath + ' `'), colors.red(err));
                        reject(err);
                    }
                    resolve(saveFolderPath);
                });
            });
        };
        this.createFoldersQueue = function (foldersList, index) {
            if (index === void 0) { index = 0; }
            return new Promise(function (resolve, reject) {
                var spFolderPath = foldersList[index].ServerRelativeUrl;
                var spBaseFolder = _this.options.spBaseFolder;
                var downloadRoot = _this.options.dlRootFolder;
                if (!_this.options.muteConsole) {
                    readline.clearLine(process.stdout, 0);
                    readline.cursorTo(process.stdout, 0, null);
                    process.stdout.write(colors.green.bold('Creating folders: ') + (index + 1) + ' out of ' + foldersList.length);
                }
                _this.createFolder(spFolderPath, spBaseFolder, downloadRoot)
                    .then(function (localFolderPath) {
                    foldersList[index].SavedToLocalPath = localFolderPath;
                    index += 1;
                    if (index < foldersList.length) {
                        resolve(_this.createFoldersQueue(foldersList, index));
                    }
                    else {
                        if (!_this.options.muteConsole) {
                            process.stdout.write('\n');
                        }
                        resolve(foldersList);
                    }
                })
                    .catch(reject);
            });
        };
        this.downloadFilesQueue = function (filesList, index) {
            if (index === void 0) { index = 0; }
            return new Promise(function (resolve, reject) {
                var spFilePath = filesList[index].ServerRelativeUrl;
                if (!_this.options.muteConsole) {
                    readline.clearLine(process.stdout, 0);
                    readline.cursorTo(process.stdout, 0, null);
                    process.stdout.write(colors.green.bold('Downloading files: ') + (index + 1) + ' out of ' + filesList.length);
                }
                _this.restApi.downloadFile(spFilePath, filesList[index])
                    .then(function (localFilePath) {
                    filesList[index].SavedToLocalPath = localFilePath;
                    index += 1;
                    if (index < filesList.length) {
                        resolve(_this.downloadFilesQueue(filesList, index));
                    }
                    else {
                        if (!_this.options.muteConsole) {
                            process.stdout.write('\n');
                        }
                        resolve(filesList);
                    }
                })
                    .catch(reject);
            });
        };
        this.getStructureRecursive = function (root, foldersQueue, filesList) {
            if (root === void 0) { root = true; }
            if (foldersQueue === void 0) { foldersQueue = []; }
            if (filesList === void 0) { filesList = []; }
            return new Promise(function (resolve, reject) {
                var exitQueue = true;
                if (typeof _this.options.spRootFolder === 'undefined' || _this.options.spRootFolder === '') {
                    reject('The `spRootFolder` property should be provided in options.');
                }
                var spRootFolder;
                if (foldersQueue.length === 0) {
                    spRootFolder = _this.options.spRootFolder;
                    exitQueue = !root;
                }
                else {
                    foldersQueue.some(function (fi) {
                        if (typeof fi.processed === 'undefined') {
                            fi.processed = false;
                        }
                        if (!fi.processed) {
                            spRootFolder = fi.serverRelativeUrl;
                            fi.processed = true;
                            exitQueue = false;
                            return true;
                        }
                        return false;
                    });
                }
                if (!exitQueue) {
                    var cntInQueue_1 = 0;
                    foldersQueue.forEach(function (folder) {
                        if (folder.processed) {
                            cntInQueue_1 += 1;
                        }
                    });
                    if (!_this.options.muteConsole) {
                        readline.clearLine(process.stdout, 0);
                        readline.cursorTo(process.stdout, 0, null);
                        process.stdout.write(colors.green.bold('Folders proceeding: ') + cntInQueue_1 + ' out of ' + foldersQueue.length + colors.gray(' [recursive scanning...]'));
                    }
                    _this.restApi.getFolderContent(spRootFolder)
                        .then(function (results) {
                        (results.folders || []).forEach(function (folder) {
                            var folderElement = {
                                folder: folder,
                                serverRelativeUrl: folder.ServerRelativeUrl,
                                processed: false
                            };
                            foldersQueue.push(folderElement);
                        });
                        filesList = filesList.concat(results.files || []);
                        resolve(_this.getStructureRecursive(false, foldersQueue, filesList));
                    })
                        .catch(reject);
                }
                else {
                    if (!_this.options.muteConsole) {
                        process.stdout.write('\n');
                    }
                    var foldersList = foldersQueue.map(function (folder) {
                        return folder.folder;
                    });
                    resolve({
                        files: filesList,
                        folders: foldersList
                    });
                }
            });
        };
        this.runCreateFoldersRecursively = function () {
            return _this.getStructureRecursive().then(function (data) {
                if ((data.folders || []).length > 0) {
                    return _this.createFoldersQueue(data.folders, 0);
                }
                else {
                    return [];
                }
            });
        };
        this.downloadMyFilesHandler = function (data) {
            if ((data.files || []).length > 0) {
                return Promise.resolve(_this.downloadFilesQueue(data.files, 0));
            }
            else {
                return Promise.resolve([]);
            }
        };
        this.runDownloadFilesFlat = function () {
            if (typeof _this.options.spRootFolder === 'undefined' || _this.options.spRootFolder === '') {
                throw new Error('The `spRootFolder` property should be provided in options.');
            }
            return _this.restApi.getFolderContent(_this.options.spRootFolder)
                .then(function (data) {
                if (_this.options.createEmptyFolders) {
                    if ((data.folders || []).length > 0) {
                        return _this.createFoldersQueue(data.folders, 0).then(function () {
                            return _this.downloadMyFilesHandler(data);
                        });
                    }
                    else {
                        return _this.downloadMyFilesHandler(data);
                    }
                }
                else {
                    return _this.downloadMyFilesHandler(data);
                }
            });
        };
        this.runDownloadStrictObjects = function () {
            var filesList = _this.options.strictObjects
                .filter(function (d) {
                var pathArr = d.split('/');
                return pathArr[pathArr.length - 1].indexOf('.') !== -1;
            })
                .map(function (d) {
                return {
                    ServerRelativeUrl: d
                };
            });
            if (filesList.length > 0) {
                return Promise.resolve(_this.downloadFilesQueue(filesList, 0));
            }
            else {
                return Promise.resolve([]);
            }
        };
        this.runDownloadCamlObjects = function () {
            return _this.restApi.getContentWithCaml()
                .then(function (data) {
                if (_this.options.createEmptyFolders) {
                    if ((data.folders || []).length > 0) {
                        return _this.createFoldersQueue(data.folders, 0).then(function () {
                            return _this.downloadMyFilesHandler(data);
                        });
                    }
                    else {
                        return _this.downloadMyFilesHandler(data);
                    }
                }
                else {
                    return _this.downloadMyFilesHandler(data);
                }
            });
        };
    }
    Download.prototype.runDownloadFilesRecursively = function () {
        var _this = this;
        return this.getStructureRecursive()
            .then(function (data) {
            if (_this.options.createEmptyFolders) {
                if ((data.folders || []).length > 0) {
                    return _this.createFoldersQueue(data.folders, 0)
                        .then(function () {
                        return _this.downloadMyFilesHandler(data);
                    });
                }
                else {
                    return _this.downloadMyFilesHandler(data);
                }
            }
            else {
                return _this.downloadMyFilesHandler(data);
            }
        });
    };
    return Download;
}());
exports.Download = Download;
//# sourceMappingURL=SPPull.js.map